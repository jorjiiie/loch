type token =
  | NUM of (int64)
  | ID of (string)
  | DEF
  | ANDDEF
  | ADD1
  | SUB1
  | LPARENSPACE
  | LPARENNOSPACE
  | RPAREN
  | LBRACK
  | RBRACK
  | LET
  | IN
  | EQUAL
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | IF
  | COLON
  | ELSECOLON
  | EOF
  | PRINT
  | PRINTSTACK
  | TRUE
  | FALSE
  | ISBOOL
  | ISNUM
  | ISTUPLE
  | EQEQ
  | LESSSPACE
  | GREATER
  | LESSEQ
  | GREATEREQ
  | AND
  | OR
  | NOT
  | COLONEQ
  | SEMI
  | NIL
  | LAMBDA
  | BEGIN
  | END
  | SHADOW
  | REC
  | UNDERSCORE
  | THREAD
  | GET
  | START

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Exprs

let full_span() = (Parsing.symbol_start_pos (), Parsing.symbol_end_pos ())
let tok_span(start, endtok) = (Parsing.rhs_start_pos start, Parsing.rhs_end_pos endtok)

# 61 "parser.ml"
let yytransl_const = [|
  259 (* DEF *);
  260 (* ANDDEF *);
  261 (* ADD1 *);
  262 (* SUB1 *);
  263 (* LPARENSPACE *);
  264 (* LPARENNOSPACE *);
  265 (* RPAREN *);
  266 (* LBRACK *);
  267 (* RBRACK *);
  268 (* LET *);
  269 (* IN *);
  270 (* EQUAL *);
  271 (* COMMA *);
  272 (* PLUS *);
  273 (* MINUS *);
  274 (* TIMES *);
  275 (* IF *);
  276 (* COLON *);
  277 (* ELSECOLON *);
    0 (* EOF *);
  278 (* PRINT *);
  279 (* PRINTSTACK *);
  280 (* TRUE *);
  281 (* FALSE *);
  282 (* ISBOOL *);
  283 (* ISNUM *);
  284 (* ISTUPLE *);
  285 (* EQEQ *);
  286 (* LESSSPACE *);
  287 (* GREATER *);
  288 (* LESSEQ *);
  289 (* GREATEREQ *);
  290 (* AND *);
  291 (* OR *);
  292 (* NOT *);
  293 (* COLONEQ *);
  294 (* SEMI *);
  295 (* NIL *);
  296 (* LAMBDA *);
  297 (* BEGIN *);
  298 (* END *);
  299 (* SHADOW *);
  300 (* REC *);
  301 (* UNDERSCORE *);
  302 (* THREAD *);
  303 (* GET *);
  304 (* START *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  258 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\004\000\007\000\007\000\006\000\006\000\006\000\006\000\006\000\
\006\000\010\000\010\000\011\000\011\000\011\000\011\000\011\000\
\011\000\012\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\009\000\009\000\009\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\016\000\016\000\
\015\000\015\000\005\000\005\000\005\000\005\000\017\000\008\000\
\008\000\018\000\018\000\019\000\019\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\005\000\003\000\005\000\004\000\005\000\006\000\003\000\003\000\
\001\000\001\000\003\000\002\000\002\000\004\000\004\000\005\000\
\005\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\003\000\001\000\004\000\
\001\000\004\000\004\000\003\000\003\000\003\000\008\000\008\000\
\005\000\008\000\008\000\005\000\001\000\001\000\006\000\007\000\
\001\000\003\000\001\000\001\000\003\000\003\000\001\000\001\000\
\002\000\001\000\003\000\000\000\002\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\079\000\000\000\000\000\000\000\000\000\
\000\000\077\000\001\000\034\000\005\000\006\000\000\000\000\000\
\000\000\000\000\008\000\012\000\002\000\003\000\009\000\010\000\
\011\000\007\000\004\000\000\000\013\000\014\000\015\000\061\000\
\000\000\000\000\000\000\049\000\062\000\000\000\000\000\075\000\
\029\000\000\000\000\000\028\000\000\000\000\000\072\000\000\000\
\000\000\000\000\000\000\071\000\000\000\000\000\067\000\068\000\
\000\000\000\000\000\000\078\000\035\000\036\000\037\000\044\000\
\042\000\040\000\043\000\041\000\038\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\054\000\000\000\
\000\000\000\000\073\000\000\000\000\000\000\000\000\000\000\000\
\023\000\000\000\024\000\000\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
\000\000\000\000\000\000\000\000\030\000\000\000\070\000\069\000\
\000\000\000\000\020\000\000\000\000\000\048\000\000\000\051\000\
\050\000\063\000\066\000\000\000\000\000\000\000\060\000\033\000\
\000\000\000\000\057\000\032\000\021\000\000\000\000\000\000\000\
\027\000\064\000\000\000\000\000\000\000\000\000\000\000\017\000\
\022\000\000\000\000\000\000\000\000\000\019\000\059\000\058\000\
\056\000\055\000"

let yydgoto = "\002\000\
\004\000\032\000\033\000\053\000\077\000\102\000\092\000\055\000\
\035\000\103\000\036\000\037\000\072\000\038\000\078\000\005\000\
\056\000\006\000\007\000"

let yysindex = "\009\000\
\012\255\000\000\018\255\000\000\024\255\012\255\129\001\021\255\
\012\255\000\000\000\000\000\000\000\000\000\000\145\255\193\255\
\011\255\129\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\129\001\000\000\000\000\000\000\000\000\
\026\255\037\000\075\255\000\000\000\000\006\255\015\255\000\000\
\000\000\019\255\029\255\000\000\025\255\033\255\000\000\023\255\
\023\255\044\255\004\255\000\000\037\255\039\255\000\000\000\000\
\041\255\020\255\129\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\129\001\225\001\
\193\000\129\001\225\001\045\255\054\255\061\255\023\255\023\255\
\129\001\000\000\241\000\023\255\023\255\129\001\000\000\033\001\
\062\255\063\255\000\000\060\255\064\255\129\001\129\001\129\001\
\000\000\066\255\000\000\049\255\000\000\065\255\067\255\070\255\
\100\255\129\001\023\255\057\255\073\255\074\255\076\255\000\000\
\077\255\081\255\085\255\086\255\000\000\087\255\000\000\000\000\
\129\001\129\001\000\000\069\255\079\255\000\000\129\001\000\000\
\000\000\000\000\000\000\129\001\078\255\082\255\000\000\000\000\
\091\255\092\255\000\000\000\000\000\000\104\255\023\255\129\001\
\000\000\000\000\129\001\129\001\129\001\129\001\004\255\000\000\
\000\000\111\255\112\255\113\255\114\255\000\000\000\000\000\000\
\000\000\000\000"

let yyrindex = "\000\000\
\177\001\000\000\000\000\000\000\081\001\177\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\145\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\115\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\000\000\117\255\000\000\000\000\
\097\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\088\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\123\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\240\255\241\255\249\255\243\255\208\255\
\064\000\180\255\000\000\000\000\000\000\072\000\212\255\000\000\
\000\000\139\000\143\000"

let yytablesize = 785
let yytable = "\034\000\
\047\000\054\000\093\000\089\000\090\000\047\000\113\000\043\000\
\046\000\001\000\057\000\118\000\047\000\073\000\003\000\074\000\
\047\000\048\000\049\000\008\000\058\000\048\000\049\000\076\000\
\047\000\079\000\080\000\009\000\039\000\048\000\049\000\084\000\
\085\000\059\000\109\000\110\000\060\000\082\000\081\000\114\000\
\115\000\087\000\075\000\083\000\086\000\091\000\050\000\088\000\
\045\000\094\000\145\000\098\000\095\000\050\000\051\000\052\000\
\073\000\050\000\074\000\052\000\096\000\097\000\131\000\099\000\
\106\000\050\000\104\000\052\000\107\000\108\000\119\000\120\000\
\121\000\111\000\126\000\128\000\132\000\122\000\116\000\127\000\
\129\000\133\000\134\000\143\000\135\000\136\000\123\000\124\000\
\125\000\137\000\061\000\062\000\063\000\138\000\139\000\140\000\
\046\000\147\000\130\000\144\000\016\000\148\000\093\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\149\000\150\000\
\071\000\141\000\142\000\061\000\062\000\063\000\151\000\159\000\
\160\000\161\000\162\000\065\000\146\000\026\000\152\000\054\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\018\000\
\153\000\158\000\105\000\154\000\155\000\156\000\157\000\100\000\
\025\000\011\000\012\000\040\000\010\000\013\000\014\000\015\000\
\016\000\041\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\000\000\000\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\027\000\
\042\000\028\000\000\000\000\000\000\000\000\000\029\000\030\000\
\031\000\011\000\012\000\000\000\000\000\013\000\014\000\015\000\
\016\000\044\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\000\000\000\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\027\000\
\045\000\028\000\000\000\000\000\000\000\000\000\029\000\030\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\000\000\047\000\000\000\047\000\047\000\047\000\000\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\000\000\047\000\047\000\
\000\000\047\000\047\000\000\000\000\000\000\000\047\000\047\000\
\047\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\000\000\045\000\000\000\045\000\045\000\045\000\000\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\000\000\045\000\045\000\
\000\000\045\000\045\000\000\000\000\000\000\000\045\000\045\000\
\045\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\000\000\046\000\046\000\046\000\000\000\046\000\
\000\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\000\000\046\000\046\000\
\000\000\046\000\046\000\000\000\000\000\000\000\046\000\046\000\
\046\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\000\000\025\000\025\000\025\000\000\000\025\000\
\000\000\000\000\000\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\000\000\025\000\
\000\000\025\000\025\000\000\000\000\000\000\000\025\000\025\000\
\025\000\011\000\012\000\000\000\000\000\013\000\014\000\015\000\
\016\000\101\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\000\000\000\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\027\000\
\000\000\028\000\000\000\000\000\000\000\000\000\029\000\030\000\
\031\000\011\000\012\000\000\000\000\000\013\000\014\000\015\000\
\016\000\112\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\000\000\000\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\027\000\
\000\000\028\000\000\000\000\000\000\000\000\000\029\000\030\000\
\031\000\011\000\012\000\000\000\000\000\013\000\014\000\015\000\
\016\000\117\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\000\000\000\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\027\000\
\000\000\028\000\000\000\000\000\000\000\000\000\029\000\030\000\
\031\000\074\000\074\000\074\000\000\000\074\000\074\000\074\000\
\074\000\000\000\000\000\000\000\074\000\000\000\000\000\000\000\
\000\000\000\000\000\000\074\000\000\000\000\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\074\000\000\000\000\000\074\000\
\000\000\074\000\000\000\000\000\000\000\000\000\074\000\074\000\
\074\000\011\000\012\000\000\000\000\000\013\000\014\000\015\000\
\016\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\000\000\000\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\027\000\
\000\000\028\000\000\000\000\000\000\000\000\000\029\000\030\000\
\031\000\076\000\076\000\000\000\000\000\076\000\076\000\076\000\
\076\000\000\000\000\000\000\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\076\000\000\000\000\000\076\000\076\000\
\076\000\076\000\076\000\076\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000\000\000\000\000\076\000\
\000\000\076\000\000\000\000\000\000\000\000\000\076\000\076\000\
\076\000\011\000\012\000\000\000\000\000\013\000\014\000\015\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\027\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\030\000\
\031\000"

let yycheck = "\007\000\
\000\000\017\000\051\000\048\000\049\000\002\001\083\000\015\000\
\016\000\001\000\018\000\088\000\002\001\008\001\003\001\010\001\
\002\001\007\001\008\001\002\001\028\000\007\001\008\001\009\001\
\002\001\007\001\008\001\004\001\008\001\007\001\008\001\007\001\
\008\001\008\001\079\000\080\000\000\000\009\001\020\001\084\000\
\085\000\009\001\037\001\015\001\020\001\002\001\043\001\015\001\
\000\000\013\001\127\000\059\000\014\001\043\001\044\001\045\001\
\008\001\043\001\010\001\045\001\020\001\042\001\107\000\071\000\
\020\001\043\001\074\000\045\001\015\001\009\001\009\001\009\001\
\013\001\081\000\009\001\009\001\020\001\014\001\086\000\015\001\
\011\001\009\001\009\001\015\001\009\001\009\001\094\000\095\000\
\096\000\009\001\016\001\017\001\018\001\009\001\009\001\009\001\
\000\000\020\001\106\000\021\001\013\001\020\001\151\000\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\020\001\020\001\
\038\001\121\000\122\000\016\001\017\001\018\001\015\001\009\001\
\009\001\009\001\009\001\009\001\132\000\009\001\143\000\143\000\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\013\001\
\144\000\151\000\075\000\147\000\148\000\149\000\150\000\072\000\
\000\000\001\001\002\001\009\000\006\000\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\009\001\255\255\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\255\255\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\009\001\255\255\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\255\255\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\255\255\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\038\001\039\001\
\255\255\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\255\255\015\001\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\255\255\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\255\255\255\255\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\255\255\255\255\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\255\255\255\255\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001"

let yynames_const = "\
  DEF\000\
  ANDDEF\000\
  ADD1\000\
  SUB1\000\
  LPARENSPACE\000\
  LPARENNOSPACE\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LET\000\
  IN\000\
  EQUAL\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  IF\000\
  COLON\000\
  ELSECOLON\000\
  EOF\000\
  PRINT\000\
  PRINTSTACK\000\
  TRUE\000\
  FALSE\000\
  ISBOOL\000\
  ISNUM\000\
  ISTUPLE\000\
  EQEQ\000\
  LESSSPACE\000\
  GREATER\000\
  LESSEQ\000\
  GREATEREQ\000\
  AND\000\
  OR\000\
  NOT\000\
  COLONEQ\000\
  SEMI\000\
  NIL\000\
  LAMBDA\000\
  BEGIN\000\
  END\000\
  SHADOW\000\
  REC\000\
  UNDERSCORE\000\
  THREAD\000\
  GET\000\
  START\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64) in
    Obj.repr(
# 26 "parser.mly"
        ( ENumber(_1, full_span()) )
# 485 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 27 "parser.mly"
         ( EBool(true, full_span()) )
# 491 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 28 "parser.mly"
          ( EBool(false, full_span()) )
# 497 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 29 "parser.mly"
                   ( ENil(full_span()) )
# 503 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 32 "parser.mly"
         ( Add1 )
# 509 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
         ( Sub1 )
# 515 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "parser.mly"
        ( Not )
# 521 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
          ( Print )
# 527 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
           ( IsBool )
# 533 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
          ( IsNum )
# 539 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "parser.mly"
            ( IsTuple )
# 545 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "parser.mly"
               ( PrintStack )
# 551 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
           ( Thread )
# 557 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
        ( Get )
# 563 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "parser.mly"
          ( Start )
# 569 "parser.ml"
               : 'prim1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
                    ( [(_1, _3, full_span())] )
# 577 "parser.ml"
               : 'bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'bindings) in
    Obj.repr(
# 46 "parser.mly"
                                   ( (_1, _3, tok_span(1, 3))::_5 )
# 586 "parser.ml"
               : 'bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'namebind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                        ( [(_1, _3, full_span())] )
# 594 "parser.ml"
               : 'namebindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'namebind) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'namebindings) in
    Obj.repr(
# 50 "parser.mly"
                                           ( (_1, _3, tok_span(1, 3))::_5 )
# 603 "parser.ml"
               : 'namebindings))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bindings) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                         ( ELet(_2, _4, full_span()) )
# 611 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'namebindings) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                                 ( ELetRec(_3, _5, full_span()) )
# 619 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                                      ( EIf(_2, _4, _6, full_span()) )
# 628 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                   ( _2 )
# 635 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                         ( ESeq(_1, _3, full_span()) )
# 643 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 58 "parser.mly"
               ( _1 )
# 650 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
         ( [_1] )
# 657 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 62 "parser.mly"
                     ( _1::_3 )
# 665 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
                         ( ETuple([], full_span()) )
# 671 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                       ( ETuple([], full_span()) )
# 677 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                                    ( ETuple([_2], full_span()) )
# 684 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                                  ( ETuple([_2], full_span()) )
# 691 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 69 "parser.mly"
                                          ( ETuple(_2::_4, full_span()) )
# 699 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 70 "parser.mly"
                                        ( ETuple(_2::_4, full_span()) )
# 707 "parser.ml"
               : 'tuple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 73 "parser.mly"
                   ( EId(_1, full_span()) )
# 714 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
         ( Plus )
# 720 "parser.ml"
               : 'prim2))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
          ( Minus )
# 726 "parser.ml"
               : 'prim2))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
          ( Times )
# 732 "parser.ml"
               : 'prim2))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
        ( And )
# 738 "parser.ml"
               : 'prim2))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
       ( Or )
# 744 "parser.ml"
               : 'prim2))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
            ( Greater )
# 750 "parser.ml"
               : 'prim2))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
              ( GreaterEq )
# 756 "parser.ml"
               : 'prim2))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
              ( Less )
# 762 "parser.ml"
               : 'prim2))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
           ( LessEq )
# 768 "parser.ml"
               : 'prim2))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
         ( Eq )
# 774 "parser.ml"
               : 'prim2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'prim2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_operand) in
    Obj.repr(
# 89 "parser.mly"
                                              ( EPrim2(_2, _1, _3, full_span()) )
# 783 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_operand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binop_expr) in
    Obj.repr(
# 90 "parser.mly"
                                                   (
      match _1 with
      | EGetItem(lhs, idx, _) -> ESetItem(lhs, idx, _3, full_span())
      | _ -> raise Parsing.Parse_error
    )
# 795 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binop_operand) in
    Obj.repr(
# 95 "parser.mly"
                             ( _1 )
# 802 "parser.ml"
               : 'binop_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'prim1) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                                    ( EPrim1(_1, _3, full_span()) )
# 810 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_expr) in
    Obj.repr(
# 101 "parser.mly"
               ( _1 )
# 817 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'binop_operand) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                                     ( EGetItem(_1, _3, full_span()) )
# 825 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'binop_operand) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 104 "parser.mly"
                                                                 ( EApp(_1, _3, Unknown, full_span()) )
# 833 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binop_operand) in
    Obj.repr(
# 105 "parser.mly"
                                                           ( EApp(_1, [], Unknown, full_span()) )
# 840 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                            ( _2 )
# 847 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                              ( _2 )
# 854 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                                                                      ( ELambda(_4, _7, full_span()) )
# 862 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                                                                    ( ELambda(_4, _7, full_span()) )
# 870 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                                           ( ELambda([], _4, full_span()) )
# 877 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                                                                    ( ELambda(_4, _7, full_span()) )
# 885 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                                                                  ( ELambda(_4, _7, full_span()) )
# 893 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                                         ( ELambda([], _4, full_span()) )
# 900 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 117 "parser.mly"
          ( _1 )
# 907 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 118 "parser.mly"
       ( _1 )
# 914 "parser.ml"
               : 'binop_operand))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                                           ( DFun(_2, [], _6, full_span()) )
# 922 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'binds) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                                                 ( DFun(_2, _4, _7, full_span()) )
# 931 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind) in
    Obj.repr(
# 125 "parser.mly"
         ( [_1] )
# 938 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binds) in
    Obj.repr(
# 126 "parser.mly"
                     ( _1::_3 )
# 946 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'namebind) in
    Obj.repr(
# 129 "parser.mly"
             ( _1 )
# 953 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'blankbind) in
    Obj.repr(
# 130 "parser.mly"
              ( _1 )
# 960 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'binds) in
    Obj.repr(
# 131 "parser.mly"
                               ( BTuple(_2, full_span()) )
# 967 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'binds) in
    Obj.repr(
# 132 "parser.mly"
                             ( BTuple(_2, full_span()) )
# 974 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                          ( BBlank(full_span()) )
# 980 "parser.ml"
               : 'blankbind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 138 "parser.mly"
                  ( BName(_1, false, full_span()) )
# 987 "parser.ml"
               : 'namebind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 139 "parser.mly"
                         ( BName(_2, true, full_span()) )
# 994 "parser.ml"
               : 'namebind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 142 "parser.mly"
         ( [_1] )
# 1001 "parser.ml"
               : 'declgroup))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declgroup) in
    Obj.repr(
# 143 "parser.mly"
                          ( _1::_3 )
# 1009 "parser.ml"
               : 'declgroup))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
    ( [] )
# 1015 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declgroup) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 147 "parser.mly"
                    ( _1::_2 )
# 1023 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
                   ( Program(_1, _2, full_span()) )
# 1031 "parser.ml"
               : (Lexing.position * Lexing.position) Exprs.program))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : (Lexing.position * Lexing.position) Exprs.program)
;;
